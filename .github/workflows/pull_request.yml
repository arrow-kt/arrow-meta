name: pull_request

on: pull_request

env:
  JAVA_OPTS: -Xms1g -Xmx3g
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs=-Xmx3g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"


jobs:
  build_documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/yarn
            ~/.gradle/nodejs
            ~/.konan
          key: build-documentation-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            build-documentation-gradle-

      - name: "Set env"
        run: |
          echo "$JAVA_HOME_8_X64/bin" >> $GITHUB_PATH
          echo "JAVA_HOME=$JAVA_HOME_8_X64" >> $GITHUB_ENV

      - name: "Run KtLint"
        run: ./gradlew ktlintCheck

      - name: "Create API Doc and validate"
        run: ./gradlew buildMetaDoc

      - name: "Build"
        env:
          JEKYLL_ENV: production
        run: |
          sudo gem install bundler
          bundle install --gemfile docs/Gemfile --path vendor/bundle
          BUNDLE_GEMFILE=docs/Gemfile bundle exec jekyll build -b /docs/meta -s docs/build/site -d docs/build/_site

  js_jvm_linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/yarn
            ~/.gradle/nodejs
            ~/.konan
          key: js-jvm-linux-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            js-jvm-linux-gradle-

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with Gradle
        run: ./gradlew jsTest linuxX64Test jvmTest --scan --stacktrace

      -  name: Bundle the build report
         if: failure()
         run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

      -  name: Upload the build report
         if: failure()
         uses: actions/upload-artifact@master
         with:
           name: error-report
           path: build-reports.zip

  macos-ios:
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: macos-ios-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            macos-ios-gradle-

      - name: Build
        working-directory: arrow-libs
        run: ./gradlew macosX64Test iosX64Test

      - name: "Prepare test reports"
        if: ${{ always() }}
        run: |
          mkdir test-reports
          for report in `ls -d arrow-libs/**/**/build/reports/tests`; do
            module=$(echo $report | cut -d/ -f3)
            cp -r $report test-reports/$module
          done

      - name: "Make test reports available to download"
        if: ${{ always() }}
        uses: actions/upload-artifact@v1
        with:
          name: test-reports
          path: test-reports

  tvos_watchos:
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: tvos-watchos-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            tvos-watchos-gradle-

      - name: Build
        working-directory: arrow-libs
        run: ./gradlew tvosX64Test watchosX64Test

      - name: "Prepare test reports"
        if: ${{ always() }}
        run: |
          mkdir test-reports
          for report in `ls -d arrow-libs/**/**/build/reports/tests`; do
            module=$(echo $report | cut -d/ -f3)
            cp -r $report test-reports/$module
          done

      - name: "Make test reports available to download"
        if: ${{ always() }}
        uses: actions/upload-artifact@v1
        with:
          name: test-reports
          path: test-reports

  windows:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore Gradle cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: windows-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            windows-gradle-

      - name: Build
        working-directory: arrow-libs
        run: ./gradlew mingwX64Test
