diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
index f10f2819..e0bb1df0 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
@@ -35,7 +35,7 @@ class IrUtils(
     TypeTranslator(
       symbolTable = pluginContext.symbolTable,
       languageVersionSettings = pluginContext.languageVersionSettings,
-      builtIns = pluginContext.builtIns
+      builtIns = pluginContext.irBuiltIns.builtIns
     ).apply translator@{
       constantValueGenerator =
         ConstantValueGenerator(
@@ -56,8 +56,8 @@ class IrUtils(
             endOffset = UNDEFINED_OFFSET,
             type = irSimpleFunctionSymbol.owner.returnType,
             symbol = irSimpleFunctionSymbol,
-            typeArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.typeParameters.size,
-            valueArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.valueParameters.size
+            typeArgumentsCount = irSimpleFunctionSymbol.owner.typeParameters.size,
+            valueArgumentsCount = irSimpleFunctionSymbol.owner.valueParameters.size
           )
         } ?: TODO("Unsupported irCall for $this")
       }
@@ -68,9 +68,9 @@ class IrUtils(
           endOffset = UNDEFINED_OFFSET,
           type = irSymbol.owner.returnType,
           symbol = irSymbol,
-          typeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size,
-          valueArgumentsCount = irSymbol.owner.descriptor.valueParameters.size,
-          constructorTypeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size
+          typeArgumentsCount = irSymbol.owner.typeParameters.size,
+          valueArgumentsCount = irSymbol.owner.valueParameters.size,
+          constructorTypeArgumentsCount = irSymbol.owner.typeParameters.size
         )
       }
       is FunctionDescriptor -> {
@@ -80,8 +80,8 @@ class IrUtils(
           endOffset = UNDEFINED_OFFSET,
           type = irSymbol.owner.returnType,
           symbol = irSymbol,
-          typeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size,
-          valueArgumentsCount = irSymbol.owner.descriptor.valueParameters.size
+          typeArgumentsCount = irSymbol.owner.typeParameters.size,
+          valueArgumentsCount = irSymbol.owner.valueParameters.size
         )
       }
       is FakeCallableDescriptorForObject -> {
@@ -106,8 +106,8 @@ class IrUtils(
         endOffset = UNDEFINED_OFFSET,
         type = irSimpleFunctionSymbol.owner.returnType,
         symbol = irSimpleFunctionSymbol,
-        typeArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.typeParameters.size,
-        valueArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.valueParameters.size
+        typeArgumentsCount = irSimpleFunctionSymbol.owner.typeParameters.size,
+        valueArgumentsCount = irSimpleFunctionSymbol.owner.valueParameters.size
       )
     }
   }
@@ -120,8 +120,8 @@ class IrUtils(
         endOffset = UNDEFINED_OFFSET,
         type = irConstructorSymbol.owner.returnType,
         symbol = irConstructorSymbol,
-        typeArgumentsCount = irConstructorSymbol.owner.descriptor.typeParameters.size,
-        valueArgumentsCount = irConstructorSymbol.owner.descriptor.valueParameters.size,
+        typeArgumentsCount = irConstructorSymbol.owner.typeParameters.size,
+        valueArgumentsCount = irConstructorSymbol.owner.valueParameters.size,
         constructorTypeArgumentsCount = declaredTypeParameters.size
       )
     }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
index 651a5aaf..69a0dc20 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
@@ -31,7 +31,6 @@ import org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl
 import org.jetbrains.kotlin.ir.expressions.mapValueParametersIndexed
 import org.jetbrains.kotlin.ir.expressions.putValueArgument
 import org.jetbrains.kotlin.ir.types.impl.originalKotlinType
-import org.jetbrains.kotlin.ir.types.toKotlinType
 import org.jetbrains.kotlin.ir.util.dump
 import org.jetbrains.kotlin.resolve.calls.inference.components.NewTypeSubstitutorByConstructorMap
 import org.jetbrains.kotlin.resolve.descriptorUtil.module
@@ -156,7 +155,7 @@ class ProofsIrCodegen(
 
   private fun CompilerContext.proveCall(expression: IrCall): IrCall =
     Log.Verbose({ "insertProof:\n ${expression.dump()} \nresult\n ${this.dump()}" }) {
-      val givenTypeParamUpperBound = GivenUpperBound(expression.symbol.descriptor)
+      val givenTypeParamUpperBound = GivenUpperBound(expression.symbol)
       val upperBound = givenTypeParamUpperBound.givenUpperBound
       if (upperBound != null) insertGivenCall(givenTypeParamUpperBound, expression)
       else insertExtensionSyntaxCall(expression)
@@ -164,13 +163,13 @@ class ProofsIrCodegen(
     }
 
   private fun CompilerContext.insertExtensionSyntaxCall(expression: IrCall) {
-    val valueType = expression.dispatchReceiver?.type?.toKotlinType()
-      ?: expression.extensionReceiver?.type?.toKotlinType()
-      ?: (if (expression.valueArgumentsCount > 0) expression.getValueArgument(0)?.type?.toKotlinType() else null)
+    val valueType = expression.dispatchReceiver?.type?.originalKotlinType
+      ?: expression.extensionReceiver?.type?.originalKotlinType
+      ?: (if (expression.valueArgumentsCount > 0) expression.getValueArgument(0)?.type?.originalKotlinType else null)
     val targetType =
-      (expression.symbol.descriptor.dispatchReceiverParameter?.containingDeclaration as? FunctionDescriptor)?.dispatchReceiverParameter?.type
-        ?: expression.symbol.descriptor.extensionReceiverParameter?.type
-        ?: expression.symbol.descriptor.valueParameters.firstOrNull()?.type
+      (expression.symbol.owner.dispatchReceiverParameter?.parent as? FunctionDescriptor)?.dispatchReceiverParameter?.type
+        ?: expression.symbol.owner.extensionReceiverParameter?.type?.originalKotlinType
+        ?: expression.symbol.owner.valueParameters.firstOrNull()?.type?.originalKotlinType
     if (targetType != null && valueType != null && targetType != valueType && !baseLineTypeChecker.isSubtypeOf(valueType, targetType)) {
       expression.apply {
         val proofCall = extensionProofCall(valueType, targetType)
@@ -193,10 +192,10 @@ class ProofsIrCodegen(
             (valueType != targetType && expression.valueArgumentsCount > 0) -> {
               dispatchReceiver = null
 
-              expression.mapValueParametersIndexed { n: Int, v: ValueParameterDescriptor ->
-                val valueArgument = expression.getValueArgument(n)
-                val valueType2 = valueArgument?.type?.toKotlinType()!!
-                val targetType2 = expression.symbol.descriptor.valueParameters[n].type
+              expression.symbol.owner.valueParameters.forEach {
+                val valueArgument = expression.getValueArgument(it.index)
+                val valueType2 = valueArgument?.type?.originalKotlinType!!
+                val targetType2 = expression.symbol.owner.valueParameters[it.index].type.originalKotlinType!!
                 val proofCall2 = extensionProofCall(valueType2, targetType2) as? IrMemberAccessExpression
                 if (proofCall2 != null) {
                   proofCall2.extensionReceiver = valueArgument
@@ -222,17 +221,17 @@ class ProofsIrCodegen(
     val upperBound = givenUpperBound.givenUpperBound
     if (upperBound != null) {
       givenUpperBound.givenValueParameters.forEach { valueParameterDescriptor ->
-        val superType = valueParameterDescriptor.type
+        val superType = valueParameterDescriptor.type.originalKotlinType!!
         givenProofCall(superType)?.apply {
-          if (expression.getValueArgument(valueParameterDescriptor) == null)
-            expression.putValueArgument(valueParameterDescriptor, this)
+          if (expression.getValueArgument(valueParameterDescriptor.index) == null)
+            expression.putValueArgument(valueParameterDescriptor.index, this)
         }
       }
     }
   }
 
   fun CompilerContext.proveProperty(it: IrProperty): IrProperty? {
-    val targetType = it.descriptor.returnType
+    val targetType = it.backingField?.symbol?.owner?.type?.originalKotlinType
     val valueType = it.backingField?.initializer?.expression?.type?.originalKotlinType
     return if (targetType != null && valueType != null && targetType != valueType) {
       it.backingField?.let { field ->
@@ -268,8 +267,8 @@ class ProofsIrCodegen(
   }
 
   fun CompilerContext.proveTypeOperator(it: IrTypeOperatorCall): IrExpression? {
-    val targetType = it.type.toKotlinType()
-    val valueType = it.argument.type.toKotlinType()
+    val targetType = it.type.originalKotlinType!!
+    val valueType = it.argument.type.originalKotlinType!!
     return if (targetType != valueType) {
       extensionProofCall(valueType, targetType)?.let { call ->
         if (call is IrMemberAccessExpression)
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/GivenUpperBound.kt b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/GivenUpperBound.kt
index d68e9052..d167c3b3 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/GivenUpperBound.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/GivenUpperBound.kt
@@ -1,15 +1,17 @@
 package arrow.meta.plugins.proofs.phases.resolve
 
 import arrow.meta.phases.resolve.intersection
-import org.jetbrains.kotlin.descriptors.CallableMemberDescriptor
-import org.jetbrains.kotlin.descriptors.ValueParameterDescriptor
+import org.jetbrains.kotlin.ir.declarations.IrValueParameter
+import org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol
+import org.jetbrains.kotlin.ir.types.impl.originalKotlinType
+import org.jetbrains.kotlin.ir.util.findAnnotation
+import org.jetbrains.kotlin.js.resolve.JsPlatformAnalyzerServices.builtIns
 import org.jetbrains.kotlin.name.FqName
-import org.jetbrains.kotlin.resolve.descriptorUtil.builtIns
 import org.jetbrains.kotlin.types.KotlinType
 import org.jetbrains.kotlin.types.typeUtil.isNothing
 
 data class GivenUpperBound(
-  val givenValueParameters: List<ValueParameterDescriptor>,
+  val givenValueParameters: List<IrValueParameter>,
   val givenUpperBound: KotlinType?
 ) {
   companion object {
@@ -22,8 +24,8 @@ data class GivenUpperBound(
         givenUpperBound = null
       )
 
-    operator fun invoke(callableMemberDescriptor: CallableMemberDescriptor): GivenUpperBound {
-      val givenValueParameters = callableMemberDescriptor.valueParameters
+    operator fun invoke(functionSymbol: IrFunctionSymbol): GivenUpperBound {
+      val givenValueParameters = functionSymbol.owner.valueParameters
         .mapNotNull {
           if (it.type.annotations.findAnnotation(givenAnnotationName) != null)
             it
@@ -31,9 +33,9 @@ data class GivenUpperBound(
         }
       return if (givenValueParameters.isEmpty()) Empty
       else {
-        val intersection = givenValueParameters.fold(callableMemberDescriptor.builtIns.nothingType as KotlinType) { a, b ->
-          if (a.isNothing()) b.type
-          else a.intersection(b.type)
+        val intersection = givenValueParameters.fold(builtIns.nothingType as KotlinType) { a, b ->
+          if (a.isNothing()) b.type.originalKotlinType!!
+          else a.intersection(b.type.originalKotlinType!!)
         }
         GivenUpperBound(givenValueParameters, intersection)
       }
diff --git a/settings.gradle b/settings.gradle
index a4a9a291..2d893030 100755
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,6 +1,6 @@
 include ':compiler-plugin'
 include ':gradle-plugin'
-include ':idea-plugin'
+// include ':idea-plugin'
 include ':meta-test'
-include ':docs'
-include ':prelude'
\ No newline at end of file
+// include ':docs'
+include ':prelude'
diff --git a/build.gradle b/build.gradle
index 1cab7b6a..9d773a92 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
   dependencies {
     classpath "org.jetbrains.dokka:dokka-gradle-plugin:$DOKKA_VERSION"
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
-    classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$KOTLIN_VERSION"
+    classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:1.4.20-dev-889"
   }
 }
 
@@ -76,7 +76,7 @@ task publishIdeTestingDependencies {
 task cleanMeta {
   dependsOn ':compiler-plugin:clean'
   dependsOn ':gradle-plugin:clean'
-  dependsOn ':idea-plugin:clean'
+  // dependsOn ':idea-plugin:clean'
   dependsOn ':meta-test:clean'
   dependsOn ':prelude:clean'
 }
@@ -89,16 +89,16 @@ task buildMeta {
   // and it could fail when changing version
   dependsOn ':gradle-plugin:jar'
   dependsOn ':publishIdeTestingDependencies'
-  dependsOn ':idea-plugin:build'
+  // dependsOn ':idea-plugin:build'
   dependsOn ':meta-test:build'
   dependsOn ':prelude:build'
-  tasks.findByPath(':idea-plugin:build').mustRunAfter ':publishIdeTestingDependencies'
+  // tasks.findByPath(':idea-plugin:build').mustRunAfter ':publishIdeTestingDependencies'
 }
 
 task publishMeta {
   dependsOn ':compiler-plugin:publishToMavenLocal'
   dependsOn ':gradle-plugin:publishToMavenLocal'
-  dependsOn ':idea-plugin:publishToMavenLocal'
+  // dependsOn ':idea-plugin:publishToMavenLocal'
   dependsOn ':meta-test:publishToMavenLocal'
   dependsOn ':prelude:publishToMavenLocal'
 }
@@ -108,9 +108,9 @@ task publishAndRunIde {
   description = "Publishes and runs IDE on local workspace"
   dependsOn ':cleanMeta'
   dependsOn ':publishMeta'
-  dependsOn ':idea-plugin:runIde'
+  // dependsOn ':idea-plugin:runIde'
   tasks.findByPath(':publishMeta').mustRunAfter ':cleanMeta'
-  tasks.findByPath(':idea-plugin:runIde').mustRunAfter ':publishMeta'
+  // tasks.findByPath(':idea-plugin:runIde').mustRunAfter ':publishMeta'
 }
 
 task generateDoc(type:Exec) {
