diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/MetaCliProcessor.kt b/compiler-plugin/src/main/kotlin/arrow/meta/MetaCliProcessor.kt
index 83b83589..7ea6dedd 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/MetaCliProcessor.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/MetaCliProcessor.kt
@@ -1,7 +1,9 @@
 package arrow.meta
 
+import org.jetbrains.kotlin.compiler.plugin.AbstractCliOption
 import org.jetbrains.kotlin.compiler.plugin.CliOption
 import org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor
+import org.jetbrains.kotlin.config.CompilerConfiguration
 
 /**
  * CLI bootstrap service
@@ -15,4 +17,5 @@ class MetaCliProcessor : CommandLineProcessor {
 
   override val pluginOptions: Collection<CliOption> = emptyList()
 
+  override fun processOption(option: AbstractCliOption, value: String, configuration: CompilerConfiguration) {}
 }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/MetaCommandLineProcessor.kt b/compiler-plugin/src/main/kotlin/arrow/meta/MetaCommandLineProcessor.kt
index 908ac851..3ed2efb4 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/MetaCommandLineProcessor.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/MetaCommandLineProcessor.kt
@@ -1,7 +1,9 @@
 package arrow.meta
 
+import org.jetbrains.kotlin.compiler.plugin.AbstractCliOption
 import org.jetbrains.kotlin.compiler.plugin.CliOption
 import org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor
+import org.jetbrains.kotlin.config.CompilerConfiguration
 
 class MetaCommandLineProcessor : CommandLineProcessor {
 
@@ -9,4 +11,5 @@ class MetaCommandLineProcessor : CommandLineProcessor {
 
   override val pluginOptions: Collection<CliOption> = emptyList()
 
+  override fun processOption(option: AbstractCliOption, value: String, configuration: CompilerConfiguration) {}
 }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/dsl/codegen/ir/IrSyntax.kt b/compiler-plugin/src/main/kotlin/arrow/meta/dsl/codegen/ir/IrSyntax.kt
index 8c4fde2a..f52d0342 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/dsl/codegen/ir/IrSyntax.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/dsl/codegen/ir/IrSyntax.kt
@@ -4,7 +4,7 @@ import arrow.meta.Meta
 import arrow.meta.phases.CompilerContext
 import arrow.meta.phases.codegen.ir.IRGeneration
 import arrow.meta.phases.codegen.ir.IrUtils
-import org.jetbrains.kotlin.backend.common.BackendContext
+import org.jetbrains.kotlin.backend.common.extensions.IrPluginContext
 import org.jetbrains.kotlin.ir.IrElement
 import org.jetbrains.kotlin.ir.IrStatement
 import org.jetbrains.kotlin.ir.declarations.IrAnonymousInitializer
@@ -82,7 +82,6 @@ import org.jetbrains.kotlin.ir.expressions.IrWhen
 import org.jetbrains.kotlin.ir.expressions.IrWhileLoop
 import org.jetbrains.kotlin.ir.util.dump
 import org.jetbrains.kotlin.ir.visitors.IrElementTransformer
-import org.jetbrains.kotlin.resolve.BindingContext
 
 /**
  * The codegen phase is where the compiler emits bytecode and metadata for the different platforms the Kotlin language targets.
@@ -100,613 +99,612 @@ interface IrSyntax {
    * targeting any platform.
    * [IR Example]
    */
-  fun IrGeneration(generate: (compilerContext: CompilerContext, file: IrFile, backendContext: BackendContext, bindingContext: BindingContext) -> Unit): IRGeneration =
-      object : IRGeneration {
-          override fun CompilerContext.generate(
-              file: IrFile,
-              backendContext: BackendContext,
-              bindingContext: BindingContext
-          ) {
-              generate(this, file, backendContext, bindingContext)
-          }
+  fun IrGeneration(generate: (compilerContext: CompilerContext, file: IrFile, pluginContext: IrPluginContext) -> Unit): IRGeneration =
+    object : IRGeneration {
+      override fun CompilerContext.generate(
+        file: IrFile,
+        pluginContext: IrPluginContext
+      ) {
+        generate(this, file, pluginContext)
       }
+    }
+
+  fun irElement(f: IrUtils.(IrElement) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitElement(element: IrElement, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), element)?.let { super.visitElement(it, data) } ?: super.visitElement(element, data)
+      }, Unit)
+    }
+
+  fun irModuleFragment(f: IrUtils.(IrModuleFragment) -> IrModuleFragment?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitModuleFragment(declaration: IrModuleFragment, data: Unit): IrModuleFragment =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitModuleFragment(declaration, data)
+      }, Unit)
+    }
+
+  fun irFile(f: IrUtils.(IrFile) -> IrFile?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitFile(declaration: IrFile, data: Unit): IrFile =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitFile(declaration, data)
+      }, Unit)
+    }
+
+  fun irExternalPackageFragment(f: IrUtils.(IrExternalPackageFragment) -> IrExternalPackageFragment?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitExternalPackageFragment(declaration: IrExternalPackageFragment, data: Unit): IrExternalPackageFragment =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitExternalPackageFragment(declaration, data)
+      }, Unit)
+    }
+
+  fun irDeclaration(f: IrUtils.(IrDeclaration) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDeclaration(declaration: IrDeclaration, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitDeclaration(declaration, data)
+      }, Unit)
+    }
+
+  fun irClass(f: IrUtils.(IrClass) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitClass(declaration: IrClass, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitClass(declaration, data)
+      }, Unit)
+    }
+
+  fun irFunction(f: IrUtils.(IrFunction) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitFunction(declaration: IrFunction, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitFunction(declaration, data)
+      }, Unit)
+    }
+
+  fun irSimpleFunction(f: IrUtils.(IrSimpleFunction) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSimpleFunction(declaration: IrSimpleFunction, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitSimpleFunction(declaration, data)
+      }, Unit)
+    }
+
+  fun irConstructor(f: IrUtils.(IrConstructor) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitConstructor(declaration: IrConstructor, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitConstructor(declaration, data)
+      }, Unit)
+    }
+
+  fun irProperty(f: IrUtils.(IrProperty) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitProperty(declaration: IrProperty, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitProperty(declaration, data)
+      }, Unit)
+    }
+
+  fun irField(f: IrUtils.(IrField) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitField(declaration: IrField, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitField(declaration, data)
+      }, Unit)
+    }
+
+  fun irLocalDelegatedProperty(f: IrUtils.(IrLocalDelegatedProperty) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitLocalDelegatedProperty(declaration: IrLocalDelegatedProperty, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitLocalDelegatedProperty(declaration, data)
+      }, Unit)
+    }
+
+  fun irEnumEntry(f: IrUtils.(IrEnumEntry) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitEnumEntry(declaration: IrEnumEntry, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitEnumEntry(declaration, data)
+      }, Unit)
+    }
+
+  fun irAnonymousInitializer(f: IrUtils.(IrAnonymousInitializer) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitAnonymousInitializer(declaration: IrAnonymousInitializer, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitAnonymousInitializer(declaration, data)
+      }, Unit)
+    }
+
+  fun irVariable(f: IrUtils.(IrVariable) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitVariable(declaration: IrVariable, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitVariable(declaration, data)
+      }, Unit)
+    }
+
+  fun irTypeParameter(f: IrUtils.(IrTypeParameter) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitTypeParameter(declaration: IrTypeParameter, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitTypeParameter(declaration, data)
+      }, Unit)
+    }
+
+  fun irValueParameter(f: IrUtils.(IrValueParameter) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitValueParameter(declaration: IrValueParameter, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitValueParameter(declaration, data)
+      }, Unit)
+    }
+
+  fun irBody(f: IrUtils.(IrBody) -> IrBody?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBody(body: IrBody, data: Unit): IrBody =
+          f(IrUtils(pluginContext, compilerContext), body) ?: super.visitBody(body, data)
+      }, Unit)
+    }
+
+  fun irExpressionBody(f: IrUtils.(IrExpressionBody) -> IrBody?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitExpressionBody(body: IrExpressionBody, data: Unit): IrBody =
+          f(IrUtils(pluginContext, compilerContext), body) ?: super.visitExpressionBody(body, data)
+      }, Unit)
+    }
+
+  fun irBlockBody(f: IrUtils.(IrBlockBody) -> IrBody?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBlockBody(body: IrBlockBody, data: Unit): IrBody =
+          f(IrUtils(pluginContext, compilerContext), body) ?: super.visitBlockBody(body, data)
+      }, Unit)
+    }
+
+  fun irSyntheticBody(f: IrUtils.(IrSyntheticBody) -> IrBody?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSyntheticBody(body: IrSyntheticBody, data: Unit): IrBody =
+          f(IrUtils(pluginContext, compilerContext), body) ?: super.visitSyntheticBody(body, data)
+      }, Unit)
+    }
+
+  fun irSuspendableExpression(f: IrUtils.(IrSuspendableExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSuspendableExpression(expression: IrSuspendableExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitSuspendableExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irSuspensionPoint(f: IrUtils.(IrSuspensionPoint) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSuspensionPoint(expression: IrSuspensionPoint, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitSuspensionPoint(expression, data)
+      }, Unit)
+    }
+
+  fun irExpression(f: IrUtils.(IrExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitExpression(expression: IrExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitExpression(expression, data)
+      }, Unit)
+    }
+
+  fun <A> Meta.irConst(f: IrUtils.(IrConst<A>) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun <T> visitConst(expression: IrConst<T>, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression as IrConst<A>) ?: super.visitConst(expression, data)
+      }, Unit)
+    }
+
+  fun irVararg(f: IrUtils.(IrVararg) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitVararg(expression: IrVararg, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitVararg(expression, data)
+      }, Unit)
+    }
+
+  fun irSpreadElement(f: IrUtils.(IrSpreadElement) -> IrSpreadElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSpreadElement(spread: IrSpreadElement, data: Unit): IrSpreadElement =
+          f(IrUtils(pluginContext, compilerContext), spread) ?: super.visitSpreadElement(spread, data)
+      }, Unit)
+    }
+
+  fun irContainerExpression(f: IrUtils.(IrContainerExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitContainerExpression(expression: IrContainerExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitContainerExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irBlock(f: IrUtils.(IrBlock) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBlock(expression: IrBlock, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitBlock(expression, data)
+      }, Unit)
+    }
+
+  fun irComposite(f: IrUtils.(IrComposite) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitComposite(expression: IrComposite, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitComposite(expression, data)
+      }, Unit)
+    }
+
+  fun irStringConcatenation(f: IrUtils.(IrStringConcatenation) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitStringConcatenation(expression: IrStringConcatenation, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitStringConcatenation(expression, data)
+      }, Unit)
+    }
+
+  fun irDeclarationReference(f: IrUtils.(IrDeclarationReference) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDeclarationReference(expression: IrDeclarationReference, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitDeclarationReference(expression, data)
+      }, Unit)
+    }
+
+  fun irSingletonReference(f: IrUtils.(IrGetSingletonValue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSingletonReference(expression: IrGetSingletonValue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitSingletonReference(expression, data)
+      }, Unit)
+    }
+
+  fun irGetObjectValue(f: IrUtils.(IrGetObjectValue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitGetObjectValue(expression: IrGetObjectValue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitGetObjectValue(expression, data)
+      }, Unit)
+    }
+
+  fun irGetEnumValue(f: IrUtils.(IrGetEnumValue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitGetEnumValue(expression: IrGetEnumValue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitGetEnumValue(expression, data)
+      }, Unit)
+    }
+
+  fun irValueAccess(f: IrUtils.(IrValueAccessExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitValueAccess(expression: IrValueAccessExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitValueAccess(expression, data)
+      }, Unit)
+    }
+
+  fun irGetValue(f: IrUtils.(IrGetValue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitGetValue(expression: IrGetValue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitGetValue(expression, data)
+      }, Unit)
+    }
+
+  fun irSetVariable(f: IrUtils.(IrSetVariable) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSetVariable(expression: IrSetVariable, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitSetVariable(expression, data)
+      }, Unit)
+    }
+
+  fun irFieldAccess(f: IrUtils.(IrFieldAccessExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitFieldAccess(expression: IrFieldAccessExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitFieldAccess(expression, data)
+      }, Unit)
+    }
+
+  fun irGetField(f: IrUtils.(IrGetField) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitGetField(expression: IrGetField, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitGetField(expression, data)
+      }, Unit)
+    }
+
+  fun irSetField(f: IrUtils.(IrSetField) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitSetField(expression: IrSetField, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitSetField(expression, data)
+      }, Unit)
+    }
+
+  fun irMemberAccess(f: IrUtils.(IrMemberAccessExpression) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitMemberAccess(expression: IrMemberAccessExpression, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitMemberAccess(expression, data)
+      }, Unit)
+    }
+
+  fun irFunctionAccess(f: IrUtils.(IrFunctionAccessExpression) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitFunctionAccess(expression: IrFunctionAccessExpression, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitFunctionAccess(expression, data)
+      }, Unit)
+    }
+
+  fun irCall(f: IrUtils.(IrCall) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitCall(expression: IrCall, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitCall(expression, data)
+      }, Unit)
+    }
+
+  fun irConstructorCall(f: IrUtils.(IrConstructorCall) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitConstructorCall(expression: IrConstructorCall, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitConstructorCall(expression, data)
+      }, Unit)
+    }
+
+  fun irDelegatingConstructorCall(f: IrUtils.(IrDelegatingConstructorCall) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDelegatingConstructorCall(expression: IrDelegatingConstructorCall, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression)
+            ?: super.visitDelegatingConstructorCall(expression, data)
+      }, Unit)
+    }
+
+  fun irEnumConstructorCall(f: IrUtils.(IrEnumConstructorCall) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitEnumConstructorCall(expression: IrEnumConstructorCall, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitEnumConstructorCall(expression, data)
+      }, Unit)
+    }
+
+  fun irGetClass(f: IrUtils.(IrGetClass) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitGetClass(expression: IrGetClass, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitGetClass(expression, data)
+      }, Unit)
+    }
+
+  fun irCallableReference(f: IrUtils.(IrCallableReference) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitCallableReference(expression: IrCallableReference, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitCallableReference(expression, data)
+      }, Unit)
+    }
+
+  fun irFunctionReference(f: IrUtils.(IrFunctionReference) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitFunctionReference(expression: IrFunctionReference, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitFunctionReference(expression, data)
+      }, Unit)
+    }
+
+  fun irPropertyReference(f: IrUtils.(IrPropertyReference) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitPropertyReference(expression: IrPropertyReference, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitPropertyReference(expression, data)
+      }, Unit)
+    }
+
+  fun irLocalDelegatedPropertyReference(f: IrUtils.(IrLocalDelegatedPropertyReference) -> IrElement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitLocalDelegatedPropertyReference(expression: IrLocalDelegatedPropertyReference, data: Unit): IrElement =
+          f(IrUtils(pluginContext, compilerContext), expression)
+            ?: super.visitLocalDelegatedPropertyReference(expression, data)
+      }, Unit)
+    }
+
+  fun irClassReference(f: IrUtils.(IrClassReference) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitClassReference(expression: IrClassReference, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitClassReference(expression, data)
+      }, Unit)
+    }
+
+  fun irInstanceInitializerCall(f: IrUtils.(IrInstanceInitializerCall) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitInstanceInitializerCall(expression: IrInstanceInitializerCall, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitInstanceInitializerCall(expression, data)
+      }, Unit)
+    }
+
+  fun irTypeOperator(f: IrUtils.(IrTypeOperatorCall) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitTypeOperator(expression: IrTypeOperatorCall, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitTypeOperator(expression, data)
+      }, Unit)
+    }
 
-    fun irElement(f: IrUtils.(IrElement) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitElement(expression: IrElement, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression)?.let { super.visitElement(it, data) } ?: super.visitElement(expression, data)
-            }, Unit)
-        }
-
-    fun irModuleFragment(f: IrUtils.(IrModuleFragment) -> IrModuleFragment?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitModuleFragment(expression: IrModuleFragment, data: Unit): IrModuleFragment =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitModuleFragment(expression, data)
-            }, Unit)
-        }
-
-    fun irFile(f: IrUtils.(IrFile) -> IrFile?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitFile(expression: IrFile, data: Unit): IrFile =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitFile(expression, data)
-            }, Unit)
-        }
-
-    fun irExternalPackageFragment(f: IrUtils.(IrExternalPackageFragment) -> IrExternalPackageFragment?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitExternalPackageFragment(expression: IrExternalPackageFragment, data: Unit): IrExternalPackageFragment =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitExternalPackageFragment(expression, data)
-            }, Unit)
-        }
-
-    fun irDeclaration(f: IrUtils.(IrDeclaration) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDeclaration(expression: IrDeclaration, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitDeclaration(expression, data)
-            }, Unit)
-        }
-
-    fun irClass(f: IrUtils.(IrClass) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitClass(expression: IrClass, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitClass(expression, data)
-            }, Unit)
-        }
-
-    fun irFunction(f: IrUtils.(IrFunction) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitFunction(expression: IrFunction, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitFunction(expression, data)
-            }, Unit)
-        }
-
-    fun irSimpleFunction(f: IrUtils.(IrSimpleFunction) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSimpleFunction(expression: IrSimpleFunction, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSimpleFunction(expression, data)
-            }, Unit)
-        }
-
-    fun irConstructor(f: IrUtils.(IrConstructor) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitConstructor(expression: IrConstructor, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitConstructor(expression, data)
-            }, Unit)
-        }
-
-    fun irProperty(f: IrUtils.(IrProperty) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitProperty(expression: IrProperty, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitProperty(expression, data)
-            }, Unit)
-        }
-
-    fun irField(f: IrUtils.(IrField) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitField(expression: IrField, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitField(expression, data)
-            }, Unit)
-        }
-
-    fun irLocalDelegatedProperty(f: IrUtils.(IrLocalDelegatedProperty) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitLocalDelegatedProperty(expression: IrLocalDelegatedProperty, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitLocalDelegatedProperty(expression, data)
-            }, Unit)
-        }
-
-    fun irEnumEntry(f: IrUtils.(IrEnumEntry) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitEnumEntry(expression: IrEnumEntry, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitEnumEntry(expression, data)
-            }, Unit)
-        }
-
-    fun irAnonymousInitializer(f: IrUtils.(IrAnonymousInitializer) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitAnonymousInitializer(expression: IrAnonymousInitializer, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitAnonymousInitializer(expression, data)
-            }, Unit)
-        }
-
-    fun irVariable(f: IrUtils.(IrVariable) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitVariable(expression: IrVariable, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitVariable(expression, data)
-            }, Unit)
-        }
-
-    fun irTypeParameter(f: IrUtils.(IrTypeParameter) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitTypeParameter(expression: IrTypeParameter, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitTypeParameter(expression, data)
-            }, Unit)
-        }
-
-    fun irValueParameter(f: IrUtils.(IrValueParameter) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitValueParameter(expression: IrValueParameter, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitValueParameter(expression, data)
-            }, Unit)
-        }
-
-    fun irBody(f: IrUtils.(IrBody) -> IrBody?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBody(body: IrBody, data: Unit): IrBody =
-                    f(IrUtils(backendContext, compilerContext), body) ?: super.visitBody(body, data)
-            }, Unit)
-        }
-
-    fun irExpressionBody(f: IrUtils.(IrExpressionBody) -> IrBody?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitExpressionBody(expression: IrExpressionBody, data: Unit): IrBody =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitExpressionBody(expression, data)
-            }, Unit)
-        }
-
-    fun irBlockBody(f: IrUtils.(IrBlockBody) -> IrBody?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBlockBody(expression: IrBlockBody, data: Unit): IrBody =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitBlockBody(expression, data)
-            }, Unit)
-        }
-
-    fun irSyntheticBody(f: IrUtils.(IrSyntheticBody) -> IrBody?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSyntheticBody(expression: IrSyntheticBody, data: Unit): IrBody =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSyntheticBody(expression, data)
-            }, Unit)
-        }
-
-    fun irSuspendableExpression(f: IrUtils.(IrSuspendableExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSuspendableExpression(expression: IrSuspendableExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSuspendableExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irSuspensionPoint(f: IrUtils.(IrSuspensionPoint) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSuspensionPoint(expression: IrSuspensionPoint, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSuspensionPoint(expression, data)
-            }, Unit)
-        }
-
-    fun irExpression(f: IrUtils.(IrExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitExpression(expression: IrExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitExpression(expression, data)
-            }, Unit)
-        }
-
-    fun <A> Meta.irConst(f: IrUtils.(IrConst<A>) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun <T> visitConst(expression: IrConst<T>, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression as IrConst<A>) ?: super.visitConst(expression, data)
-            }, Unit)
-        }
-
-    fun irVararg(f: IrUtils.(IrVararg) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitVararg(expression: IrVararg, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitVararg(expression, data)
-            }, Unit)
-        }
-
-    fun irSpreadElement(f: IrUtils.(IrSpreadElement) -> IrSpreadElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSpreadElement(expression: IrSpreadElement, data: Unit): IrSpreadElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSpreadElement(expression, data)
-            }, Unit)
-        }
-
-    fun irContainerExpression(f: IrUtils.(IrContainerExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitContainerExpression(expression: IrContainerExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitContainerExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irBlock(f: IrUtils.(IrBlock) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBlock(expression: IrBlock, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitBlock(expression, data)
-            }, Unit)
-        }
-
-    fun irComposite(f: IrUtils.(IrComposite) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitComposite(expression: IrComposite, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitComposite(expression, data)
-            }, Unit)
-        }
-
-    fun irStringConcatenation(f: IrUtils.(IrStringConcatenation) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitStringConcatenation(expression: IrStringConcatenation, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitStringConcatenation(expression, data)
-            }, Unit)
-        }
-
-    fun irDeclarationReference(f: IrUtils.(IrDeclarationReference) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDeclarationReference(expression: IrDeclarationReference, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitDeclarationReference(expression, data)
-            }, Unit)
-        }
-
-    fun irSingletonReference(f: IrUtils.(IrGetSingletonValue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSingletonReference(expression: IrGetSingletonValue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSingletonReference(expression, data)
-            }, Unit)
-        }
-
-    fun irGetObjectValue(f: IrUtils.(IrGetObjectValue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitGetObjectValue(expression: IrGetObjectValue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitGetObjectValue(expression, data)
-            }, Unit)
-        }
-
-    fun irGetEnumValue(f: IrUtils.(IrGetEnumValue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitGetEnumValue(expression: IrGetEnumValue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitGetEnumValue(expression, data)
-            }, Unit)
-        }
-
-    fun irValueAccess(f: IrUtils.(IrValueAccessExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitValueAccess(expression: IrValueAccessExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitValueAccess(expression, data)
-            }, Unit)
-        }
-
-    fun irGetValue(f: IrUtils.(IrGetValue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitGetValue(expression: IrGetValue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitGetValue(expression, data)
-            }, Unit)
-        }
-
-    fun irSetVariable(f: IrUtils.(IrSetVariable) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSetVariable(expression: IrSetVariable, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSetVariable(expression, data)
-            }, Unit)
-        }
-
-    fun irFieldAccess(f: IrUtils.(IrFieldAccessExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitFieldAccess(expression: IrFieldAccessExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitFieldAccess(expression, data)
-            }, Unit)
-        }
-
-    fun irGetField(f: IrUtils.(IrGetField) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitGetField(expression: IrGetField, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitGetField(expression, data)
-            }, Unit)
-        }
-
-    fun irSetField(f: IrUtils.(IrSetField) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitSetField(expression: IrSetField, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitSetField(expression, data)
-            }, Unit)
-        }
-
-    fun irMemberAccess(f: IrUtils.(IrMemberAccessExpression) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitMemberAccess(expression: IrMemberAccessExpression, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitMemberAccess(expression, data)
-            }, Unit)
-        }
-
-    fun irFunctionAccess(f: IrUtils.(IrFunctionAccessExpression) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitFunctionAccess(expression: IrFunctionAccessExpression, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitFunctionAccess(expression, data)
-            }, Unit)
-        }
-
-    fun irCall(f: IrUtils.(IrCall) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitCall(expression: IrCall, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitCall(expression, data)
-            }, Unit)
-        }
-
-    fun irConstructorCall(f: IrUtils.(IrConstructorCall) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitConstructorCall(expression: IrConstructorCall, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitConstructorCall(expression, data)
-            }, Unit)
-        }
-
-    fun irDelegatingConstructorCall(f: IrUtils.(IrDelegatingConstructorCall) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDelegatingConstructorCall(expression: IrDelegatingConstructorCall, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression)
-                        ?: super.visitDelegatingConstructorCall(expression, data)
-            }, Unit)
-        }
-
-    fun irEnumConstructorCall(f: IrUtils.(IrEnumConstructorCall) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitEnumConstructorCall(expression: IrEnumConstructorCall, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitEnumConstructorCall(expression, data)
-            }, Unit)
-        }
-
-    fun irGetClass(f: IrUtils.(IrGetClass) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitGetClass(expression: IrGetClass, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitGetClass(expression, data)
-            }, Unit)
-        }
-
-    fun irCallableReference(f: IrUtils.(IrCallableReference) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitCallableReference(expression: IrCallableReference, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitCallableReference(expression, data)
-            }, Unit)
-        }
-
-    fun irFunctionReference(f: IrUtils.(IrFunctionReference) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitFunctionReference(expression: IrFunctionReference, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitFunctionReference(expression, data)
-            }, Unit)
-        }
-
-    fun irPropertyReference(f: IrUtils.(IrPropertyReference) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitPropertyReference(expression: IrPropertyReference, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitPropertyReference(expression, data)
-            }, Unit)
-        }
-
-    fun irLocalDelegatedPropertyReference(f: IrUtils.(IrLocalDelegatedPropertyReference) -> IrElement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitLocalDelegatedPropertyReference(expression: IrLocalDelegatedPropertyReference, data: Unit): IrElement =
-                    f(IrUtils(backendContext, compilerContext), expression)
-                        ?: super.visitLocalDelegatedPropertyReference(expression, data)
-            }, Unit)
-        }
-
-    fun irClassReference(f: IrUtils.(IrClassReference) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitClassReference(expression: IrClassReference, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitClassReference(expression, data)
-            }, Unit)
-        }
-
-    fun irInstanceInitializerCall(f: IrUtils.(IrInstanceInitializerCall) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitInstanceInitializerCall(expression: IrInstanceInitializerCall, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitInstanceInitializerCall(expression, data)
-            }, Unit)
-        }
-
-    fun irTypeOperator(f: IrUtils.(IrTypeOperatorCall) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitTypeOperator(expression: IrTypeOperatorCall, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitTypeOperator(expression, data)
-            }, Unit)
-        }
-
-    fun irWhen(f: IrUtils.(IrWhen) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitWhen(expression: IrWhen, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitWhen(expression, data)
-            }, Unit)
-        }
-
-    fun irBranch(f: IrUtils.(IrBranch) -> IrBranch?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBranch(expression: IrBranch, data: Unit): IrBranch =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitBranch(expression, data)
-            }, Unit)
-        }
-
-    fun irElseBranch(f: IrUtils.(IrElseBranch) -> IrElseBranch?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitElseBranch(expression: IrElseBranch, data: Unit): IrElseBranch =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitElseBranch(expression, data)
-            }, Unit)
-        }
-
-    fun irLoop(f: IrUtils.(IrLoop) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitLoop(expression: IrLoop, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitLoop(expression, data)
-            }, Unit)
-        }
-
-    fun irWhileLoop(f: IrUtils.(IrWhileLoop) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitWhileLoop(expression: IrWhileLoop, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitWhileLoop(expression, data)
-            }, Unit)
-        }
-
-    fun irDoWhileLoop(f: IrUtils.(IrDoWhileLoop) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDoWhileLoop(expression: IrDoWhileLoop, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitDoWhileLoop(expression, data)
-            }, Unit)
-        }
-
-    fun irTry(f: IrUtils.(IrTry) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitTry(expression: IrTry, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitTry(expression, data)
-            }, Unit)
-        }
-
-    fun irCatch(f: IrUtils.(IrCatch) -> IrCatch?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitCatch(expression: IrCatch, data: Unit): IrCatch =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitCatch(expression, data)
-            }, Unit)
-        }
-
-    fun irBreakContinue(f: IrUtils.(IrBreakContinue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBreakContinue(expression: IrBreakContinue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitBreakContinue(expression, data)
-            }, Unit)
-        }
-
-    fun irBreak(f: IrUtils.(IrBreak) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitBreak(expression: IrBreak, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitBreak(expression, data)
-            }, Unit)
-        }
-
-    fun irContinue(f: IrUtils.(IrContinue) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitContinue(expression: IrContinue, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitContinue(expression, data)
-            }, Unit)
-        }
-
-    fun irReturn(f: IrUtils.(IrReturn) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitReturn(expression: IrReturn, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitReturn(expression, data)
-            }, Unit)
-        }
-
-    fun irThrow(f: IrUtils.(IrThrow) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitThrow(expression: IrThrow, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitThrow(expression, data)
-            }, Unit)
-        }
-
-    fun irDynamicExpression(f: IrUtils.(IrDynamicExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDynamicExpression(expression: IrDynamicExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitDynamicExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irDynamicOperatorExpression(f: IrUtils.(IrDynamicOperatorExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDynamicOperatorExpression(expression: IrDynamicOperatorExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression)
-                        ?: super.visitDynamicOperatorExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irDynamicMemberExpression(f: IrUtils.(IrDynamicMemberExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitDynamicMemberExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irErrorDeclaration(f: IrUtils.(IrErrorDeclaration) -> IrStatement?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitErrorDeclaration(expression: IrErrorDeclaration, data: Unit): IrStatement =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitErrorDeclaration(expression, data)
-            }, Unit)
-        }
-
-    fun irErrorExpression(f: IrUtils.(IrErrorExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitErrorExpression(expression: IrErrorExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitErrorExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irErrorCallExpression(f: IrUtils.(IrErrorCallExpression) -> IrExpression?): IRGeneration =
-        IrGeneration { compilerContext, file, backendContext, bindingContext ->
-            file.transformChildren(object : IrElementTransformer<Unit> {
-                override fun visitErrorCallExpression(expression: IrErrorCallExpression, data: Unit): IrExpression =
-                    f(IrUtils(backendContext, compilerContext), expression) ?: super.visitErrorCallExpression(expression, data)
-            }, Unit)
-        }
-
-    fun irDump(): IRGeneration = IrGeneration { compilerContext, file, backendContext, bindingContext ->
-        println(file.dump())
+  fun irWhen(f: IrUtils.(IrWhen) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitWhen(expression: IrWhen, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitWhen(expression, data)
+      }, Unit)
     }
+
+  fun irBranch(f: IrUtils.(IrBranch) -> IrBranch?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBranch(branch: IrBranch, data: Unit): IrBranch =
+          f(IrUtils(pluginContext, compilerContext), branch) ?: super.visitBranch(branch, data)
+      }, Unit)
+    }
+
+  fun irElseBranch(f: IrUtils.(IrElseBranch) -> IrElseBranch?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitElseBranch(branch: IrElseBranch, data: Unit): IrElseBranch =
+          f(IrUtils(pluginContext, compilerContext), branch) ?: super.visitElseBranch(branch, data)
+      }, Unit)
+    }
+
+  fun irLoop(f: IrUtils.(IrLoop) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitLoop(loop: IrLoop, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), loop) ?: super.visitLoop(loop, data)
+      }, Unit)
+    }
+
+  fun irWhileLoop(f: IrUtils.(IrWhileLoop) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitWhileLoop(loop: IrWhileLoop, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), loop) ?: super.visitWhileLoop(loop, data)
+      }, Unit)
+    }
+
+  fun irDoWhileLoop(f: IrUtils.(IrDoWhileLoop) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDoWhileLoop(loop: IrDoWhileLoop, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), loop) ?: super.visitDoWhileLoop(loop, data)
+      }, Unit)
+    }
+
+  fun irTry(f: IrUtils.(IrTry) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitTry(aTry: IrTry, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), aTry) ?: super.visitTry(aTry, data)
+      }, Unit)
+    }
+
+  fun irCatch(f: IrUtils.(IrCatch) -> IrCatch?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitCatch(aCatch: IrCatch, data: Unit): IrCatch =
+          f(IrUtils(pluginContext, compilerContext), aCatch) ?: super.visitCatch(aCatch, data)
+      }, Unit)
+    }
+
+  fun irBreakContinue(f: IrUtils.(IrBreakContinue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBreakContinue(jump: IrBreakContinue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), jump) ?: super.visitBreakContinue(jump, data)
+      }, Unit)
+    }
+
+  fun irBreak(f: IrUtils.(IrBreak) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitBreak(jump: IrBreak, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), jump) ?: super.visitBreak(jump, data)
+      }, Unit)
+    }
+
+  fun irContinue(f: IrUtils.(IrContinue) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitContinue(jump: IrContinue, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), jump) ?: super.visitContinue(jump, data)
+      }, Unit)
+    }
+
+  fun irReturn(f: IrUtils.(IrReturn) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitReturn(expression: IrReturn, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitReturn(expression, data)
+      }, Unit)
+    }
+
+  fun irThrow(f: IrUtils.(IrThrow) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitThrow(expression: IrThrow, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitThrow(expression, data)
+      }, Unit)
+    }
+
+  fun irDynamicExpression(f: IrUtils.(IrDynamicExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDynamicExpression(expression: IrDynamicExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitDynamicExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irDynamicOperatorExpression(f: IrUtils.(IrDynamicOperatorExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDynamicOperatorExpression(expression: IrDynamicOperatorExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression)
+            ?: super.visitDynamicOperatorExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irDynamicMemberExpression(f: IrUtils.(IrDynamicMemberExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitDynamicMemberExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irErrorDeclaration(f: IrUtils.(IrErrorDeclaration) -> IrStatement?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitErrorDeclaration(declaration: IrErrorDeclaration, data: Unit): IrStatement =
+          f(IrUtils(pluginContext, compilerContext), declaration) ?: super.visitErrorDeclaration(declaration, data)
+      }, Unit)
+    }
+
+  fun irErrorExpression(f: IrUtils.(IrErrorExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitErrorExpression(expression: IrErrorExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitErrorExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irErrorCallExpression(f: IrUtils.(IrErrorCallExpression) -> IrExpression?): IRGeneration =
+    IrGeneration { compilerContext, file, pluginContext ->
+      file.transformChildren(object : IrElementTransformer<Unit> {
+        override fun visitErrorCallExpression(expression: IrErrorCallExpression, data: Unit): IrExpression =
+          f(IrUtils(pluginContext, compilerContext), expression) ?: super.visitErrorCallExpression(expression, data)
+      }, Unit)
+    }
+
+  fun irDump(): IRGeneration = IrGeneration { compilerContext, file, pluginContext ->
+    println(file.dump())
+  }
 }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/dsl/resolve/ResolveSyntax.kt b/compiler-plugin/src/main/kotlin/arrow/meta/dsl/resolve/ResolveSyntax.kt
index 8f795e8e..2539d650 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/dsl/resolve/ResolveSyntax.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/dsl/resolve/ResolveSyntax.kt
@@ -50,7 +50,6 @@ interface ResolveSyntax {
         declaration: DeclarationDescriptor?,
         containingDeclaration: DeclarationDescriptor?,
         currentModality: Modality,
-        bindingContext: BindingContext,
         isImplicitModality: Boolean
       ): Modality? =
         refineDeclarationModality(
@@ -58,7 +57,6 @@ interface ResolveSyntax {
           declaration,
           containingDeclaration,
           currentModality,
-          bindingContext,
           isImplicitModality
         )
     }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt b/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
index 15cfa85e..331c1f05 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
@@ -23,8 +23,8 @@ import arrow.meta.phases.resolve.synthetics.SyntheticResolver
 import arrow.meta.phases.resolve.synthetics.SyntheticScopeProvider
 import org.jetbrains.kotlin.analyzer.AnalysisResult
 import org.jetbrains.kotlin.analyzer.ModuleInfo
-import org.jetbrains.kotlin.backend.common.BackendContext
 import org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension
+import org.jetbrains.kotlin.backend.common.extensions.IrPluginContext
 import org.jetbrains.kotlin.cli.common.CLIConfigurationKeys
 import org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity
 import org.jetbrains.kotlin.cli.common.messages.MessageCollector
@@ -34,9 +34,6 @@ import org.jetbrains.kotlin.codegen.StackValue
 import org.jetbrains.kotlin.codegen.extensions.ClassBuilderInterceptorExtension
 import org.jetbrains.kotlin.codegen.extensions.ExpressionCodegenExtension
 import org.jetbrains.kotlin.com.intellij.mock.MockProject
-import org.jetbrains.kotlin.com.intellij.openapi.extensions.Extensions
-import org.jetbrains.kotlin.com.intellij.openapi.extensions.impl.ExtensionPointImpl
-import org.jetbrains.kotlin.com.intellij.openapi.extensions.impl.ExtensionsAreaImpl
 import org.jetbrains.kotlin.com.intellij.openapi.project.Project
 import org.jetbrains.kotlin.com.intellij.openapi.vfs.VirtualFile
 import org.jetbrains.kotlin.com.intellij.testFramework.LightVirtualFile
@@ -62,7 +59,7 @@ import org.jetbrains.kotlin.extensions.PreprocessedVirtualFileFactoryExtension
 import org.jetbrains.kotlin.extensions.StorageComponentContainerContributor
 import org.jetbrains.kotlin.incremental.components.LookupLocation
 import org.jetbrains.kotlin.incremental.components.LookupTracker
-import org.jetbrains.kotlin.ir.declarations.IrFile
+import org.jetbrains.kotlin.ir.declarations.IrModuleFragment
 import org.jetbrains.kotlin.name.Name
 import org.jetbrains.kotlin.platform.TargetPlatform
 import org.jetbrains.kotlin.psi.KtDeclaration
@@ -132,11 +129,11 @@ interface InternalRegistry : ConfigSyntax {
     configuration: CompilerConfiguration,
     context: CompilerContext? = null
   ) {
-    val extensionPoints = (Extensions.getArea(project) as ExtensionsAreaImpl).extensionPoints.toList()
-    //println("Project allowed extensions: ${(project.extensionArea as ExtensionsAreaImpl).extensionPoints.toList().joinToString("\n")}")
+    // val extensionPoints = (Extensions.getArea(project) as ExtensionsAreaImpl).extensionPoints.toList()
+    // println("Project allowed extensions: ${(project.extensionArea as ExtensionsAreaImpl).extensionPoints.toList().joinToString("\n")}")
     cli {
       println("it's the CLI plugin")
-      registerSyntheticScopeProviderIfNeeded(extensionPoints, project)
+      // registerSyntheticScopeProviderIfNeeded(extensionPoints, project)
     }
     ide {
       println("it's the IDEA plugin")
@@ -194,11 +191,11 @@ interface InternalRegistry : ConfigSyntax {
     }
   }
 
-  fun registerSyntheticScopeProviderIfNeeded(extensionPoints: List<ExtensionPointImpl<Any>>, project: Project) {
-    if (!extensionPoints.any { it.name == SyntheticScopeProviderExtension.extensionPointName.name }) {
-      SyntheticScopeProviderExtension.registerExtensionPoint(project)
-    }
-  }
+//  fun registerSyntheticScopeProviderIfNeeded(extensionPoints: List<ExtensionPointImpl<Any>>, project: Project) {
+//    if (!extensionPoints.any { it.name == SyntheticScopeProviderExtension.extensionPointName.name }) {
+//      SyntheticScopeProviderExtension.registerExtensionPoint(project)
+//    }
+//  }
 
   fun installArrowPlugin() {
     val ideaPath = System.getProperty("idea.plugins.path")
@@ -232,6 +229,7 @@ interface InternalRegistry : ConfigSyntax {
   }
 
   fun registerSyntheticScopeProvider(project: Project, phase: SyntheticScopeProvider, ctx: CompilerContext) {
+    SyntheticScopeProviderExtension.registerExtensionPoint(project)
     SyntheticScopeProviderExtension.registerExtension(project, object : SyntheticScopeProviderExtension {
       override fun getScopes(moduleDescriptor: ModuleDescriptor, javaSyntheticPropertiesScope: JavaSyntheticPropertiesScope): List<SyntheticScope> =
         phase.run {
@@ -276,11 +274,11 @@ interface InternalRegistry : ConfigSyntax {
   ) {
     IrGenerationExtension.registerExtension(project, object : IrGenerationExtension {
       override fun generate(
-        file: IrFile,
-        backendContext: BackendContext,
-        bindingContext: BindingContext
+        moduleFragment: IrModuleFragment,
+        pluginContext: IrPluginContext
       ) {
-        phase.run { compilerContext.generate(file, backendContext, bindingContext) }
+        phase.run { moduleFragment.files.forEach { compilerContext.generate(it, pluginContext) }
+        }
       }
     })
   }
@@ -424,7 +422,6 @@ interface InternalRegistry : ConfigSyntax {
           declaration: DeclarationDescriptor?,
           containingDeclaration: DeclarationDescriptor?,
           currentModality: Modality,
-          bindingContext: BindingContext,
           isImplicitModality: Boolean
         ): Modality? {
           return phase.run {
@@ -433,7 +430,6 @@ interface InternalRegistry : ConfigSyntax {
               declaration,
               containingDeclaration,
               currentModality,
-              bindingContext,
               isImplicitModality
             )
           }
@@ -602,4 +598,4 @@ internal fun setFinalStatic(field: Field, newValue: Any) {
   modifiersField.setInt(field, field.modifiers and Modifier.FINAL.inv())
 
   field.set(null, newValue)
-}
\ No newline at end of file
+}
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IRGeneration.kt b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IRGeneration.kt
index 2867bd7c..0b19295b 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IRGeneration.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IRGeneration.kt
@@ -2,9 +2,8 @@ package arrow.meta.phases.codegen.ir
 
 import arrow.meta.phases.CompilerContext
 import arrow.meta.phases.ExtensionPhase
-import org.jetbrains.kotlin.backend.common.BackendContext
+import org.jetbrains.kotlin.backend.common.extensions.IrPluginContext
 import org.jetbrains.kotlin.ir.declarations.IrFile
-import org.jetbrains.kotlin.resolve.BindingContext
 
 /**
  * @see [ExtensionPhase]
@@ -14,8 +13,7 @@ interface IRGeneration : ExtensionPhase {
 
   fun CompilerContext.generate(
     file: IrFile,
-    backendContext: BackendContext,
-    bindingContext: BindingContext
+    pluginContext: IrPluginContext
   )
 
 }
\ No newline at end of file
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
index d8c5529d..f10f2819 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/phases/codegen/ir/IrUtils.kt
@@ -1,7 +1,7 @@
 package arrow.meta.phases.codegen.ir
 
 import arrow.meta.phases.CompilerContext
-import org.jetbrains.kotlin.backend.common.BackendContext
+import org.jetbrains.kotlin.backend.common.extensions.IrPluginContext
 import org.jetbrains.kotlin.descriptors.CallableDescriptor
 import org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor
 import org.jetbrains.kotlin.descriptors.ClassDescriptor
@@ -12,7 +12,6 @@ import org.jetbrains.kotlin.ir.UNDEFINED_OFFSET
 import org.jetbrains.kotlin.ir.expressions.IrCall
 import org.jetbrains.kotlin.ir.expressions.IrConstructorCall
 import org.jetbrains.kotlin.ir.expressions.IrExpression
-import org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression
 import org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl
 import org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl
 import org.jetbrains.kotlin.ir.expressions.impl.IrGetObjectValueImpl
@@ -28,20 +27,20 @@ import org.jetbrains.kotlin.resolve.calls.inference.components.NewTypeSubstituto
 import org.jetbrains.kotlin.resolve.calls.util.FakeCallableDescriptorForObject
 
 class IrUtils(
-  val backendContext: BackendContext,
+  val pluginContext: IrPluginContext,
   val compilerContext: CompilerContext
-) : ReferenceSymbolTable by backendContext.ir.symbols.externalSymbolTable {
+) : ReferenceSymbolTable by pluginContext.symbolTable {
 
   val typeTranslator: TypeTranslator =
     TypeTranslator(
-      symbolTable = backendContext.ir.symbols.externalSymbolTable,
-      languageVersionSettings = backendContext.irBuiltIns.languageVersionSettings,
-      builtIns = backendContext.builtIns
+      symbolTable = pluginContext.symbolTable,
+      languageVersionSettings = pluginContext.languageVersionSettings,
+      builtIns = pluginContext.builtIns
     ).apply translator@{
       constantValueGenerator =
         ConstantValueGenerator(
-          moduleDescriptor = backendContext.ir.irModule.descriptor,
-          symbolTable = backendContext.ir.symbols.externalSymbolTable
+          moduleDescriptor = pluginContext.moduleDescriptor,
+          symbolTable = pluginContext.symbolTable
         ).apply {
           this.typeTranslator = this@translator
         }
@@ -50,46 +49,43 @@ class IrUtils(
   fun CallableDescriptor.irCall(): IrExpression =
     when (this) {
       is PropertyDescriptor -> {
-        val irField = backendContext.ir.symbols.externalSymbolTable.referenceField(this)
+        val irField = pluginContext.symbolTable.referenceField(this)
         irField.owner.correspondingPropertySymbol?.owner?.getter?.symbol?.let { irSimpleFunctionSymbol ->
           IrCallImpl(
             startOffset = UNDEFINED_OFFSET,
             endOffset = UNDEFINED_OFFSET,
             type = irSimpleFunctionSymbol.owner.returnType,
             symbol = irSimpleFunctionSymbol,
-            descriptor = irSimpleFunctionSymbol.owner.descriptor,
             typeArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.typeParameters.size,
             valueArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.valueParameters.size
           )
         } ?: TODO("Unsupported irCall for $this")
       }
       is ClassConstructorDescriptor -> {
-        val irSymbol = backendContext.ir.symbols.externalSymbolTable.referenceConstructor(this)
+        val irSymbol = pluginContext.symbolTable.referenceConstructor(this)
         IrConstructorCallImpl(
           startOffset = UNDEFINED_OFFSET,
           endOffset = UNDEFINED_OFFSET,
           type = irSymbol.owner.returnType,
           symbol = irSymbol,
-          descriptor = irSymbol.descriptor,
           typeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size,
           valueArgumentsCount = irSymbol.owner.descriptor.valueParameters.size,
           constructorTypeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size
         )
       }
       is FunctionDescriptor -> {
-        val irSymbol = backendContext.ir.symbols.externalSymbolTable.referenceFunction(this)
+        val irSymbol = pluginContext.symbolTable.referenceFunction(this)
         IrCallImpl(
           startOffset = UNDEFINED_OFFSET,
           endOffset = UNDEFINED_OFFSET,
           type = irSymbol.owner.returnType,
           symbol = irSymbol,
-          descriptor = irSymbol.descriptor,
           typeArgumentsCount = irSymbol.owner.descriptor.typeParameters.size,
           valueArgumentsCount = irSymbol.owner.descriptor.valueParameters.size
         )
       }
       is FakeCallableDescriptorForObject -> {
-        val irSymbol = backendContext.ir.symbols.externalSymbolTable.referenceClass(classDescriptor)
+        val irSymbol = pluginContext.symbolTable.referenceClass(classDescriptor)
         IrGetObjectValueImpl(
           startOffset = UNDEFINED_OFFSET,
           endOffset = UNDEFINED_OFFSET,
@@ -103,14 +99,13 @@ class IrUtils(
     }
 
   fun PropertyDescriptor.irGetterCall(): IrCall? {
-    val irField = backendContext.ir.symbols.externalSymbolTable.referenceField(this)
+    val irField = pluginContext.symbolTable.referenceField(this)
     return irField.owner.correspondingPropertySymbol?.owner?.getter?.symbol?.let { irSimpleFunctionSymbol ->
       IrCallImpl(
         startOffset = UNDEFINED_OFFSET,
         endOffset = UNDEFINED_OFFSET,
         type = irSimpleFunctionSymbol.owner.returnType,
         symbol = irSimpleFunctionSymbol,
-        descriptor = irSimpleFunctionSymbol.owner.descriptor,
         typeArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.typeParameters.size,
         valueArgumentsCount = irSimpleFunctionSymbol.owner.descriptor.valueParameters.size
       )
@@ -118,14 +113,13 @@ class IrUtils(
   }
 
   fun ClassDescriptor.irConstructorCall(): IrConstructorCall? {
-    val irClass = backendContext.ir.symbols.externalSymbolTable.referenceClass(this)
+    val irClass = pluginContext.symbolTable.referenceClass(this)
     return irClass.constructors.firstOrNull()?.let { irConstructorSymbol ->
       IrConstructorCallImpl(
         startOffset = UNDEFINED_OFFSET,
         endOffset = UNDEFINED_OFFSET,
         type = irConstructorSymbol.owner.returnType,
         symbol = irConstructorSymbol,
-        descriptor = irConstructorSymbol.owner.descriptor,
         typeArgumentsCount = irConstructorSymbol.owner.descriptor.typeParameters.size,
         valueArgumentsCount = irConstructorSymbol.owner.descriptor.valueParameters.size,
         constructorTypeArgumentsCount = declaredTypeParameters.size
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/phases/resolve/DeclarationAttributeAlterer.kt b/compiler-plugin/src/main/kotlin/arrow/meta/phases/resolve/DeclarationAttributeAlterer.kt
index fcbbb97c..7b2596e4 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/phases/resolve/DeclarationAttributeAlterer.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/phases/resolve/DeclarationAttributeAlterer.kt
@@ -5,7 +5,6 @@ import arrow.meta.phases.ExtensionPhase
 import org.jetbrains.kotlin.descriptors.DeclarationDescriptor
 import org.jetbrains.kotlin.descriptors.Modality
 import org.jetbrains.kotlin.psi.KtModifierListOwner
-import org.jetbrains.kotlin.resolve.BindingContext
 
 /**
  * @see [ExtensionPhase]
@@ -17,7 +16,6 @@ interface DeclarationAttributeAlterer : ExtensionPhase {
     declaration: DeclarationDescriptor?,
     containingDeclaration: DeclarationDescriptor?,
     currentModality: Modality,
-    bindingContext: BindingContext,
     isImplicitModality: Boolean
   ): Modality?
 }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
index c5247590..651a5aaf 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/ir/ProofsIrCodegen.kt
@@ -54,7 +54,7 @@ class ProofsIrCodegen(
       if (this is IrMemberAccessExpression) {
         fn.typeParameters.forEachIndexed { n, descriptor ->
           //TODO determine why sometimes type susbtitution returns unbound type args. Ex: fun <A> SecondN<FirstN<A>>.flatten(): Second<A>
-          putTypeArgument(n, irTypes.getOrElse(n) { backendContext.irBuiltIns.nothingType })
+          putTypeArgument(n, irTypes.getOrElse(n) { pluginContext.irBuiltIns.nothingType })
         }
       }
     }
@@ -156,7 +156,7 @@ class ProofsIrCodegen(
 
   private fun CompilerContext.proveCall(expression: IrCall): IrCall =
     Log.Verbose({ "insertProof:\n ${expression.dump()} \nresult\n ${this.dump()}" }) {
-      val givenTypeParamUpperBound = GivenUpperBound(expression.descriptor)
+      val givenTypeParamUpperBound = GivenUpperBound(expression.symbol.descriptor)
       val upperBound = givenTypeParamUpperBound.givenUpperBound
       if (upperBound != null) insertGivenCall(givenTypeParamUpperBound, expression)
       else insertExtensionSyntaxCall(expression)
@@ -168,9 +168,9 @@ class ProofsIrCodegen(
       ?: expression.extensionReceiver?.type?.toKotlinType()
       ?: (if (expression.valueArgumentsCount > 0) expression.getValueArgument(0)?.type?.toKotlinType() else null)
     val targetType =
-      (expression.descriptor.dispatchReceiverParameter?.containingDeclaration as? FunctionDescriptor)?.dispatchReceiverParameter?.type
-        ?: expression.descriptor.extensionReceiverParameter?.type
-        ?: expression.descriptor.valueParameters.firstOrNull()?.type
+      (expression.symbol.descriptor.dispatchReceiverParameter?.containingDeclaration as? FunctionDescriptor)?.dispatchReceiverParameter?.type
+        ?: expression.symbol.descriptor.extensionReceiverParameter?.type
+        ?: expression.symbol.descriptor.valueParameters.firstOrNull()?.type
     if (targetType != null && valueType != null && targetType != valueType && !baseLineTypeChecker.isSubtypeOf(valueType, targetType)) {
       expression.apply {
         val proofCall = extensionProofCall(valueType, targetType)
@@ -196,7 +196,7 @@ class ProofsIrCodegen(
               expression.mapValueParametersIndexed { n: Int, v: ValueParameterDescriptor ->
                 val valueArgument = expression.getValueArgument(n)
                 val valueType2 = valueArgument?.type?.toKotlinType()!!
-                val targetType2 = expression.descriptor.valueParameters[n].type
+                val targetType2 = expression.symbol.descriptor.valueParameters[n].type
                 val proofCall2 = extensionProofCall(valueType2, targetType2) as? IrMemberAccessExpression
                 if (proofCall2 != null) {
                   proofCall2.extensionReceiver = valueArgument
diff --git a/gradle.properties b/gradle.properties
index 266952f7..6e1ca5ec 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -3,8 +3,8 @@ GROUP=io.arrow-kt
 VERSION_NAME=1.3.61-SNAPSHOT
 # Dependencies versions
 ARROW_VERSION=0.10.5
-KOTLIN_VERSION=1.3.61
-KOTLIN_IDEA_VERSION=1.3.61-release-IJ2019.3-1
+KOTLIN_VERSION=1.3.72
+KOTLIN_IDEA_VERSION=1.3.72-release-IJ2020.1-3
 INTELLIJ_IDEA_VERSION=2020.1.2
 JVM_TARGET_VERSION=1.8
 KOTLIN_TEST_VERSION=3.4.2
