diff --git a/compiler-plugin/build.gradle b/compiler-plugin/build.gradle
index a1a14a79..f7f74855 100644
--- a/compiler-plugin/build.gradle
+++ b/compiler-plugin/build.gradle
@@ -33,6 +33,7 @@ dependencies {
     testRuntimeOnly("io.arrow-kt:arrow-optics:$ARROW_VERSION") {
         exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
     }
+    testRuntimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
     testRuntimeOnly project(":prelude")
 }
 
@@ -76,6 +77,7 @@ test {
     testLogging.showStandardStreams = true
     systemProperty "CURRENT_VERSION", "$VERSION_NAME"
     systemProperty "ARROW_VERSION", "$ARROW_VERSION"
+    systemProperty "KOTLIN_VERSION", "$KOTLIN_VERSION"
     jvmArgs '-Dkotlin.compiler.execution.strategy="in-process"'
 }
 
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt b/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
index 15cfa85e..4e0583f5 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/internal/registry/InternalRegistry.kt
@@ -263,6 +263,7 @@ interface InternalRegistry : ConfigSyntax {
 
               override fun getSyntheticStaticFunctions(scope: ResolutionScope, name: Name, location: LookupLocation): Collection<FunctionDescriptor> =
                 phase.run { ctx.syntheticStaticFunctions(scope, name, location) }
+
             }
           )
         }
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsScopeTower.kt b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsScopeTower.kt
index 3f8927df..b6b128c3 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsScopeTower.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsScopeTower.kt
@@ -6,6 +6,7 @@ import arrow.meta.phases.CompilerContext
 import arrow.meta.plugins.proofs.phases.Proof
 import org.jetbrains.kotlin.backend.common.SimpleMemberScope
 import org.jetbrains.kotlin.descriptors.FunctionDescriptor
+import org.jetbrains.kotlin.descriptors.VariableDescriptor
 import org.jetbrains.kotlin.descriptors.ModuleDescriptor
 import org.jetbrains.kotlin.incremental.components.LookupLocation
 import org.jetbrains.kotlin.incremental.components.NoLookupLocation
diff --git a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsSyntheticScopes.kt b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsSyntheticScopes.kt
index 3f7250f5..c3fc5c8f 100644
--- a/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsSyntheticScopes.kt
+++ b/compiler-plugin/src/main/kotlin/arrow/meta/plugins/proofs/phases/resolve/scopes/ProofsSyntheticScopes.kt
@@ -76,7 +76,17 @@ class ProofsSyntheticScope(private val ctx: CompilerContext) : SyntheticScope {
     }
 
   override fun getSyntheticConstructors(scope: ResolutionScope, name: Name, location: LookupLocation): Collection<FunctionDescriptor> =
-    Log.Silent({ "ProofsSyntheticScope.getSyntheticConstructors($scope), $name result: $this" }) {
+    Log.Silent({ "ProofsSyntheticScope.getSyntheticConstructors($scope, $name, $location) result: $this" }) {
+      emptyList()
+    }
+
+  override fun getSyntheticStaticFunctions(scope: ResolutionScope): Collection<FunctionDescriptor> =
+    Log.Silent({ "ProofsSyntheticScope.getSyntheticStaticFunctions($scope)" }) {
+      emptyList()
+    }
+
+  override fun getSyntheticStaticFunctions(scope: ResolutionScope, name: Name, location: LookupLocation): Collection<FunctionDescriptor> =
+    Log.Silent({ "ProofsSyntheticScope.getSyntheticStaticFunctions scope: $scope, name:$name, location:$location" }) {
       emptyList()
     }
 
@@ -99,16 +109,6 @@ class ProofsSyntheticScope(private val ctx: CompilerContext) : SyntheticScope {
     Log.Silent({ "ProofsSyntheticScope.getSyntheticMemberFunctions $this" }) {
       ctx.syntheticMemberFunctions(receiverTypes, name)
     }
-
-  override fun getSyntheticStaticFunctions(scope: ResolutionScope): Collection<FunctionDescriptor> =
-    Log.Silent({ "ProofsSyntheticScope.getSyntheticStaticFunctions($scope)" }) {
-      emptyList()
-    }
-
-  override fun getSyntheticStaticFunctions(scope: ResolutionScope, name: Name, location: LookupLocation): Collection<FunctionDescriptor> =
-    Log.Silent({ "ProofsSyntheticScope.getSyntheticStaticFunctions name: $name" }) {
-      emptyList()
-    }
 }
 
 fun CallableMemberDescriptor.discardPlatformBaseObjectFakeOverrides(): CallableMemberDescriptor? =
@@ -151,8 +151,8 @@ fun Meta.provenSyntheticScope(): ExtensionPhase =
         emptyList()
       }
     },
-    syntheticConstructorsForName = { scope, name, location ->
-      Log.Silent({ "syntheticScopes.syntheticConstructorsForName $scope $name, $location" }) {
+    syntheticConstructorsForName = { scope, name,location ->
+      Log.Silent({ "syntheticScopes.syntheticConstructorsForName $scope,$name, $location" }) {
         emptyList()
       }
     },
diff --git a/meta-test/build.gradle b/meta-test/build.gradle
index 1cbcaac9..5e04d916 100755
--- a/meta-test/build.gradle
+++ b/meta-test/build.gradle
@@ -23,6 +23,7 @@ dependencies {
     testRuntimeOnly("io.arrow-kt:arrow-annotations:$ARROW_VERSION") {
         exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
     }
+    testRuntimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
     testRuntimeOnly project(':prelude')
 }
 
@@ -41,6 +42,7 @@ test {
     }
     systemProperty "CURRENT_VERSION", "$VERSION_NAME"
     systemProperty "ARROW_VERSION", "$ARROW_VERSION"
+    systemProperty "KOTLIN_VERSION", "$KOTLIN_VERSION"
 }
 
 jar {
diff --git a/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt b/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
index 033600b4..51b7f05b 100644
--- a/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
+++ b/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
@@ -9,13 +9,16 @@ import java.io.File
 
 internal const val DEFAULT_FILENAME = "Source.kt"
 
-internal fun compile(data: CompilationData): Result =
-  KotlinCompilation().apply {
+internal fun compile(data: CompilationData): Result {
+  val kotlinVersion = System.getProperty("KOTLIN_VERSION")
+
+  return KotlinCompilation().apply {
     sources = data.sources.map { SourceFile.kotlin(it.filename, it.text.trimMargin()) }
-    classpaths = data.dependencies.map { classpathOf(it) }
+    classpaths = data.dependencies.map { classpathOf(it) } + listOf(classpathOf("kotlin-stdlib:$kotlinVersion"))
     pluginClasspaths = data.compilerPlugins.map { classpathOf(it) }
     compilerPlugins = data.metaPlugins
   }.compile()
+}
 
 private fun classpathOf(dependency: String): File {
   val regex = Regex(".*${dependency.replace(':', '-')}.*")
