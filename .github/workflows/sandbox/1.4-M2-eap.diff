diff --git a/compiler-plugin/build.gradle b/compiler-plugin/build.gradle
index f524d67..7fced89 100644
--- a/compiler-plugin/build.gradle
+++ b/compiler-plugin/build.gradle
@@ -33,6 +33,7 @@ dependencies {
     testRuntimeOnly("io.arrow-kt:arrow-optics:$ARROW_VERSION") {
         exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
     }
+    testRuntimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
     testRuntimeOnly project(":prelude")
 }
 
@@ -76,6 +77,7 @@ test {
     testLogging.showStandardStreams = true
     systemProperty "CURRENT_VERSION", "$VERSION_NAME"
     systemProperty "ARROW_VERSION", "$ARROW_VERSION"
+    systemProperty "KOTLIN_VERSION", "$KOTLIN_VERSION"
     jvmArgs '-Dkotlin.compiler.execution.strategy="in-process"'
 }
 
diff --git a/meta-test/build.gradle b/meta-test/build.gradle
index 58c53fb..2b8c008 100755
--- a/meta-test/build.gradle
+++ b/meta-test/build.gradle
@@ -25,6 +25,7 @@ dependencies {
     testRuntimeOnly("io.arrow-kt:arrow-annotations:$ARROW_VERSION") {
         exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
     }
+    testRuntimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
     testRuntimeOnly project(':prelude')
 }
 
@@ -43,6 +44,7 @@ test {
     }
     systemProperty "CURRENT_VERSION", "$VERSION_NAME"
     systemProperty "ARROW_VERSION", "$ARROW_VERSION"
+    systemProperty "KOTLIN_VERSION", "$KOTLIN_VERSION"
 }
 
 jar {
diff --git a/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt b/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
index 033600b..51b7f05 100644
--- a/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
+++ b/meta-test/src/main/kotlin/arrow/meta/plugin/testing/Compilation.kt
@@ -9,13 +9,16 @@ import java.io.File
 
 internal const val DEFAULT_FILENAME = "Source.kt"
 
-internal fun compile(data: CompilationData): Result =
-  KotlinCompilation().apply {
+internal fun compile(data: CompilationData): Result {
+  val kotlinVersion = System.getProperty("KOTLIN_VERSION")
+
+  return KotlinCompilation().apply {
     sources = data.sources.map { SourceFile.kotlin(it.filename, it.text.trimMargin()) }
-    classpaths = data.dependencies.map { classpathOf(it) }
+    classpaths = data.dependencies.map { classpathOf(it) } + listOf(classpathOf("kotlin-stdlib:$kotlinVersion"))
     pluginClasspaths = data.compilerPlugins.map { classpathOf(it) }
     compilerPlugins = data.metaPlugins
   }.compile()
+}
 
 private fun classpathOf(dependency: String): File {
   val regex = Regex(".*${dependency.replace(':', '-')}.*")
