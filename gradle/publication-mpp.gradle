/*
 * Copyright (C) 2021 The Arrow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
}

publishing {
    publications.all {
        version = VERSION_NAME

        artifact javadocJar

        pom {
            name = POM_NAME
            packaging = POM_PACKAGING
            description = POM_DESCRIPTION
            url = POM_URL

            scm {
                url = POM_SCM_URL
                connection = POM_SCM_CONNECTION
                developerConnection = POM_SCM_DEV_CONNECTION
            }
            licenses {
                license {
                    name = POM_LICENCE_NAME
                    url = POM_LICENCE_URL
                    distribution = POM_LICENCE_DIST
                }
            }
            developers {
                developer {
                    id = POM_DEVELOPER_ID
                    name = POM_DEVELOPER_NAME
                }
            }
        }
    }
    
    repositories {
        maven {
            credentials {
                username "$System.env.SONATYPE_USER"
                password "$System.env.SONATYPE_PWD"
            }
            url = VERSION_NAME.endsWith('SNAPSHOT') ? SNAPSHOT_REPOSITORY : RELEASE_REPOSITORY
        }
    }
}

// Guide: https://docs.gradle.org/current/userguide/signing_plugin.html
if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)

        sign publishing.publications.kotlinMultiplatform
        sign publishing.publications.jvm
    }
}
