buildscript {
  repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
  }
  dependencies {
    classpath "io.arrow-kt:arrow-ank-gradle:$ANK_GRADLE_PLUGIN_VERSION"
  }
}

plugins {
    id "org.jetbrains.intellij" version "$INTELLIJ_GRADLE_PLUGIN_VERSION"
}

apply plugin: 'ank-gradle-plugin'
apply plugin: 'kotlin-kapt'

dependencies {
    compile project(':idea-plugin')
    compile "junit:junit:4.13"
}

intellij {
    version = "$INTELLIJ_IDEA_VERSION"
    plugins = ["org.jetbrains.kotlin:${KOTLIN_IDEA_VERSION}"]
}

task printcp {
    doLast {
        println sourceSets.main.compileClasspath.each { println it }
        println sourceSets.main.runtimeClasspath.each { println it }
    }
}

ext {
    set("LOCAL_PATHS_FILE", "docs/localPaths.log")
    // Reason: required by ank; file must exist during Gradle configuration check
    if ( !new File("$LOCAL_PATHS_FILE").exists() )  new File("$LOCAL_PATHS_FILE").createNewFile()
}

ank {
    source = file("${projectDir}/docs")
    target = file("${projectDir}/build/site")
    classpath = sourceSets.main.runtimeClasspath + layout.files(new File("$LOCAL_PATHS_FILE").readLines())
}

task getLocalPaths {
    // Reason: local paths cannot be generated in Ank extension neither ext section
    doLast {
        def libraries = ['kotlin-plugin.jar', 'platform-api.jar', 'platform-impl.jar', 'idea.jar']
        def localPaths = libraries.collect{ library -> sourceSets.main.compileClasspath.find{ path -> path.name == "$library" } }
        def localPathsFile = new File("$LOCAL_PATHS_FILE")
        localPathsFile.write localPaths.join("\n")
        layout.files(new File("$LOCAL_PATHS_FILE").readLines()).each { println it.path }
    }
}

compileKotlin.kotlinOptions.freeCompilerArgs += ["-Xskip-runtime-version-check"]
