plugins {
  id 'kotlin'
  id 'java-gradle-plugin'
  id 'com.gradle.plugin-publish' version "$GRADLE_PLUGIN_PUBLISH_VERSION"
}

group = 'io.arrow-kt'
version = VERSION_NAME
def pluginId = 'io.arrow-kt.arrow'

processResources {
  filesMatching('**/plugin.properties') {
    filter { it.replace('%COMPILER_PLUGIN_VERSION%', VERSION_NAME) }
    filter { it.replace('%KOTLIN_VERSION%', KOTLIN_VERSION) }
  }
}

dependencies {
  implementation gradleApi()
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
  implementation "org.jetbrains.kotlin:kotlin-gradle-plugin-api:$KOTLIN_VERSION"
  implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
  implementation "io.github.classgraph:classgraph:$CLASS_GRAPH_VERSION"
  // Necessary during plugin execution to be found and added for compilation
  api project(':arrow-meta')
  api project(':proofs-plugin')
  api project(':optics-plugin')
  api project(':refined-types-plugin')
}

compileKotlin {
  kotlinOptions.jvmTarget = "$JVM_TARGET_VERSION"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "$JVM_TARGET_VERSION"
}

// Required to put the Kotlin plugin on the classpath for the functional test suite
tasks.withType(PluginUnderTestMetadata).configureEach {
  pluginClasspath.from(configurations.compileOnly)
}

gradlePlugin {
  plugins {
    arrow {
      id = pluginId
      implementationClass = "arrow.meta.plugin.gradle.ArrowGradlePlugin"
    }
  }
}

pluginBundle {
  website = "https://meta.arrow-kt.io"
  vcsUrl = "https://github.com/arrow-kt/arrow-meta"
  description = "Functional companion to Kotlin's Compiler"
  tags = ["kotlin", "compiler", "arrow", "plugin", "meta"]

  plugins {
    arrow {
      displayName = "Arrow Meta Gradle Plugin"
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.matches('.*Plugin.*MavenPublication.*')) { task.enabled = false }
}
