apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    // WARNING: configurations are used by shadowJar
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    compileOnly "com.intellij:openapi:$OPENAPI_VERSION"
    compileOnly "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$KOTLIN_VERSION"
    compileOnly("org.jetbrains.kotlin:kotlin-script-util:$KOTLIN_VERSION") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-compiler"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-compiler-embeddable"
    }
    api "org.jetbrains.kotlin:kotlin-compiler-embeddable:$KOTLIN_VERSION"

    testCompileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$KOTLIN_VERSION"
    testImplementation("io.kotlintest:kotlintest-runner-junit4:$KOTLIN_TEST_VERSION") {
        exclude group: "io.arrow-kt", module: "arrow-core-data"
        exclude group: "io.arrow-kt", module: "arrow-core-extensions"
    }
    testImplementation project(":meta-test")
    testRuntimeOnly project(':compiler-plugin')
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-script-util:$KOTLIN_VERSION"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$KOTLIN_VERSION"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    testRuntimeOnly("io.arrow-kt:arrow-optics:$ARROW_VERSION") {
        exclude group: "org.jetbrains.kotlin"
    }
    testRuntimeOnly project(":prelude")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xjvm-default=enable"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
        jvmTarget = "1.8"
    }
}

jar {
    manifest {
        attributes["Specification-Title"] = project.name
        attributes["Specification-Version"] = project.version
        attributes["Implementation-Title"] = "arrow.meta.plugin.compiler"
        attributes["Implementation-Version"] = project.version
    }
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

shadowJar {
    // api is not resolvable and compileClasspath or runtime (default) includes too many deps
    configurations = [project.configurations.compileOnly] 
    relocate 'org.jetbrains.kotlin.com.intellij', 'com.intellij'
    dependencies {
        exclude(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        // and its transitive dependencies:
        exclude(dependency('org.jetbrains.kotlin:kotlin-stdlib-common'))
        exclude(dependency('org.jetbrains:annotations'))

        exclude(dependency('com.intellij:openapi'))
        // and its transitive dependencies:
        exclude(dependency('com.intellij:extensions'))
        exclude(dependency('com.intellij:annotations'))
    }
}

test {
    testLogging.showStandardStreams = true
    systemProperty "CURRENT_VERSION", "$VERSION_NAME"
    systemProperty "ARROW_VERSION", "$ARROW_VERSION"
    systemProperty "KOTLIN_VERSION", "$KOTLIN_VERSION"
    jvmArgs '-Dkotlin.compiler.execution.strategy="in-process"'
}
