buildscript {
  repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
  }
  dependencies {
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:$DOKKA_VERSION"
    classpath "io.arrow-kt:arrow-ank-gradle:$ANK_GRADLE_PLUGIN_VERSION"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
    classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$KOTLIN_VERSION"
  }
}

plugins {
  // Replace plugin DSL by legacy plugin application to use EAP versions by Kotlin
  // id 'org.jetbrains.kotlin.jvm' version "$KOTLIN_VERSION"
  // id 'org.jetbrains.kotlin.kapt' version "$KOTLIN_VERSION"
  id 'com.github.johnrengelman.shadow' version "$SHADOW_JAR_VERSION"
  id 'maven-publish'
}

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.kapt"

def pathApiDocs = "${rootDir}/docs/docs/apidocs"

allprojects {

  clean.doFirst {
    delete pathApiDocs
  }

  repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven {
      url "https://dl.bintray.com/arrow-kt/arrow-kt/"
      content {
        includeGroup "io.arrow-kt"
      }
    }
    mavenCentral()
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
  }
}

subprojects { project ->

  group = GROUP
  version = VERSION_NAME

  apply plugin: 'kotlin'
  apply plugin: 'org.jetbrains.dokka'
  apply plugin: 'maven-publish'

  publishing {
      publications {
          maven(MavenPublication) {
              from components.java
          }
      }
  }

  //dokka log spam `Can't find node by signature` comes from https://github.com/Kotlin/dokka/issues/269
  dokka {
    outputFormat = 'jekyll'
    outputDirectory = pathApiDocs
  }
}

task cleanMeta {
  dependsOn ':compiler-plugin:clean'
  dependsOn ':gradle-plugin:clean'
  dependsOn ':idea-plugin:clean'
  dependsOn ':testing-plugin:clean'
  dependsOn ':prelude:clean'
}

task buildMeta {
  dependsOn ':compiler-plugin:build'
  dependsOn ':gradle-plugin:jar'
  dependsOn ':idea-plugin:build'
  dependsOn ':testing-plugin:build'
  dependsOn ':prelude:build'
}

task publishMeta {
  dependsOn ':compiler-plugin:publishToMavenLocal'
  dependsOn ':gradle-plugin:publishToMavenLocal'
  dependsOn ':idea-plugin:publishToMavenLocal'
  dependsOn ':testing-plugin:publishToMavenLocal'
  dependsOn ':prelude:publishToMavenLocal'
}

task publishAndRunIde {
  dependsOn ':cleanMeta'
  dependsOn ':publishMeta'
  dependsOn ':idea-plugin:runIde'
  tasks.findByPath(':publishMeta').mustRunAfter ':cleanMeta'
  tasks.findByPath(':idea-plugin:runIde').mustRunAfter ':publishMeta'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = "$GRADLE_VERSION"
}
