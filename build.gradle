buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
  }
}

plugins {
  // Replace plugin DSL by legacy plugin application to use EAP versions by Kotlin
  // id 'org.jetbrains.kotlin.jvm' version "$KOTLIN_VERSION"
  id "org.jetbrains.dokka" version "$DOKKA_VERSION"
  id 'com.github.johnrengelman.shadow' version "$SHADOW_JAR_VERSION"
}

apply plugin: "org.jetbrains.kotlin.jvm"

def pathApiDocs = "${rootDir}/docs/docs/apidocs"

allprojects {

  clean.doFirst {
    delete pathApiDocs
  }

  repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven {
      url "https://dl.bintray.com/arrow-kt/arrow-kt/"
      content {
        includeGroup "io.arrow-kt"
      }
    }
    mavenCentral()
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
  }
}

subprojects { project ->

  group = GROUP
  version = VERSION_NAME

  apply plugin: 'kotlin'
  apply plugin: 'org.jetbrains.dokka'

  //dokka log spam `Can't find node by signature` comes from https://github.com/Kotlin/dokka/issues/269
  dokka {
    outputFormat = 'jekyll'
    outputDirectory = pathApiDocs
  }
}

configure(subprojects
        - project("docs")
) {
  apply from: "https://raw.githubusercontent.com/arrow-kt/arrow/master/arrow-libs/gradle/publication.gradle"
}

// To run tests for Arrow Meta IDEA Plugin
task publishIdeTestingDependencies {
  dependsOn ':compiler-plugin:publishToMavenLocal'
  dependsOn ':gradle-plugin:publishToMavenLocal'
  dependsOn ':prelude:publishToMavenLocal'
}

task cleanMeta {
  dependsOn ':compiler-plugin:clean'
  dependsOn ':gradle-plugin:clean'
  dependsOn ':idea-plugin:clean'
  dependsOn ':meta-test:clean'
  dependsOn ':prelude:clean'
}

task buildMeta {
  group = "Arrow Meta"
  description = "Assembles and tests"
  dependsOn ':compiler-plugin:build'
  dependsOn ':gradle-plugin:build'
  dependsOn ':publishIdeTestingDependencies'
  dependsOn ':idea-plugin:build'
  dependsOn ':meta-test:build'
  dependsOn ':prelude:build'
  tasks.findByPath(':idea-plugin:build').mustRunAfter ':publishIdeTestingDependencies'
}

task publishMeta {
  dependsOn ':compiler-plugin:publishToMavenLocal'
  dependsOn ':gradle-plugin:publishToMavenLocal'
  dependsOn ':meta-test:publishToMavenLocal'
  dependsOn ':prelude:publishToMavenLocal'
}

task publishAndRunIde {
  group = "Arrow Meta"
  description = "Publishes and runs IDE on local workspace"
  dependsOn ':cleanMeta'
  dependsOn ':publishMeta'
  dependsOn ':idea-plugin:buildPlugin'
  dependsOn ':idea-plugin:runIde'
  tasks.findByPath(':publishMeta').mustRunAfter ':cleanMeta'
  tasks.findByPath(':idea-plugin:buildPlugin').mustRunAfter ':publishMeta'
  tasks.findByPath(':idea-plugin:runIde').mustRunAfter ':idea-plugin:buildPlugin'
}

task generateDoc(type:Exec) {
    // Reason of commandLine: dokka is not available in root project
    // and to avoid specifying the list of modules
    commandLine "sh", "gradlew", "dokka"
}

task configureValidation(type:Exec) {
    // Reason of commandLine: getLocalPaths and runAnk come from
    // the same Gradle configuration and they must not be run
    // in the same process
    commandLine "sh", "gradlew", ":docs:getLocalPaths"
}

task runValidation(type:Exec) {
    commandLine "sh", "gradlew", ":docs:runAnk"
}

task buildMetaDoc {
    group = "Arrow Meta"
    description = "Generates API Doc and validates all the documentation"
    dependsOn 'configureValidation'
    dependsOn 'generateDoc'
    dependsOn 'runValidation'
}

generateDoc.mustRunAfter configureValidation
runValidation.mustRunAfter generateDoc
