buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
  }
}

plugins {
  // Replace plugin DSL by legacy plugin application to use EAP versions by Kotlin
  // id 'org.jetbrains.kotlin.jvm' version "$KOTLIN_VERSION"
  id "org.jetbrains.dokka" version "$DOKKA_VERSION" apply false
}

apply plugin: "org.jetbrains.kotlin.jvm"

def pathApiDocs = "${rootDir}/docs/docs/apidocs"

configure(subprojects
  - project("docs")
) {
  // Documentation
  clean.doFirst {
    delete pathApiDocs
  }

  apply plugin: "org.jetbrains.dokka"
  dokka {
    outputFormat = 'jekyll'
    outputDirectory = pathApiDocs
  }

  // Publication
  group = GROUP
  version = VERSION_NAME
  afterEvaluate {
    jar {
      archiveBaseName = POM_ARTIFACT_ID
      manifest {
        attributes["Specification-Title"] = project.name
        attributes["Specification-Version"] = project.version
        attributes["Implementation-Title"] = POM_NAME
        attributes["Implementation-Version"] = project.version
      }
    }
  }
  apply from: "https://raw.githubusercontent.com/arrow-kt/arrow/main/arrow-libs/gradle/publication.gradle"
}

allprojects {
  repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }
}

task generateDoc(type: Exec) {
  // Reason of commandLine: to avoid specifying the list of modules
  commandLine "sh", "gradlew", "dokka"
}

task runValidation(type: Exec) {
  commandLine "sh", "gradlew", ":docs:runAnk"
}

task buildMetaDoc {
  group = "documentation"
  description = "Generates API Doc and validates all the documentation"
  dependsOn 'generateDoc'
  dependsOn 'runValidation'
}

runValidation.mustRunAfter generateDoc